name: Build
env:
  rustlib: polyline-ffi
  wheelname: pypolyline

on: [push, pull_request]

jobs:
  get_latest_lib_tag:
    name: Get latest Rust lib tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.latest-tag.outputs.tag}}
    steps:
      - id: latest-tag
        uses: oprypin/find-latest-tag@v1
        with:
          repository: urschrei/${{ env.rustlib }}  # The repository to scan.
          releases-only: true  # We know that all relevant tags have a GitHub release for them.
      - run: echo "Latest lib tag ${{ steps.latest-tag.outputs.tag }}"



  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: get_latest_lib_tag
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macOS-10.15]

    steps:
      - uses: actions/checkout@v2
        name: Check out repo

      # Used to host cibuildwheel
      - uses: actions/setup-python@v2
      - id: set-filename
        name: Set compressed Rust lib filename to retrieve based on OS
        run: |
            if [ "$RUNNER_OS" == "Linux" ]; then
                echo "filename=${{ env.rustlib }}-${{ needs.get_latest_lib_tag.outputs.tag }}-x86_64-unknown-linux-gnu.tar.gz" >> $GITHUB_ENV
            elif [ "$RUNNER_OS" == "Windows" ]; then
                echo "filename=${{ env.rustlib }}-${{ needs.get_latest_lib_tag.outputs.tag }}-x86_64-pc-windows-msvc.zip" >> $GITHUB_ENV
            else
                echo "filename=${{ env.rustlib }}-${{ needs.get_latest_lib_tag.outputs.tag }}-x86_64-apple-darwin.tar.gz" >> $GITHUB_ENV
            fi
        shell: bash

      - id: get-rust-lib
        uses: stryd/fetch-release-asset@v1
        name: Download latest Rust lib release
        with:
          access_token: ${{ secrets.POLYLINE_RETRIEVAL }}
          repo: urschrei/${{ env.rustlib }}
          version: ${{ needs.get_latest_lib_tag.outputs.tag }}
          asset_name: ${{ env.filename }}
          save_as: rustlib.zip # maps to outputs.location

      - name: Install cibuildwheel
        run:   |
               python -m pip install cibuildwheel==1.11.1.post1
               if [ "$RUNNER_OS" == "Linux" ]; then
                    tar -xvf ${{ steps.get-rust-lib.outputs.location }} -C ${{ env.wheelname }}
               elif [ "$RUNNER_OS" == "Windows" ]; then
                    7z x ${{ steps.get-rust-lib.outputs.location }} -o${{ env.wheelname }}
               else
                    tar -xvf ${{ steps.get-rust-lib.outputs.location }} -C ${{ env.wheelname }}
               fi
        shell: bash

      - name: Build wheels and test
        run: python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        env:
          CIBW_BEFORE_BUILD: pip install numpy
          CIBW_BUILD_VERBOSITY: 1
          CIBW_TEST_REQUIRES: setuptools pytest nose numpy cython
          CIBW_BUILD: cp37-macosx_x86_64  cp37-manylinux_x86_64 cp38-macosx_x86_64 cp38-manylinux_x86_64 cp39-macosx_x86_64 cp39-macosx_arm64 cp39-manylinux_x86_64
          CIBW_TEST_COMMAND: nosetests ${{ env.wheelname }}

      - uses: actions/upload-artifact@v2
        name: Upload repaired wheels as artifact
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl
